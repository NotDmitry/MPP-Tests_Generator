using System.Threading.Tasks.Dataflow;

namespace Tests_Generator.Core.Dataflow;

public class GeneratorPipeline
{
    public async Task Generate(string targetPath, int maxReadCount, int maxProcessCount, int maxWriteCount)
    {
        // Sources to read code from
        DirectoryInfo sourceDirectory = new DirectoryInfo(targetPath);
        var files = sourceDirectory.GetFiles().Select(file => file.FullName);

        var options = new DataflowLinkOptions { PropagateCompletion = true };

        var readRoutine = new TransformBlock<string, string>(ReadSourceFile,
            new ExecutionDataflowBlockOptions { MaxDegreeOfParallelism = maxReadCount });

        var processRoutine = new TransformBlock<string, List<TargetContainer>>(GenerateTests,
            new ExecutionDataflowBlockOptions { MaxDegreeOfParallelism = maxProcessCount });

        var writeRoutine = new ActionBlock<List<TargetContainer>>(code => WriteTestsToFile(Path.Combine(targetPath, "AutogeneratedMSTests"), code),
            new ExecutionDataflowBlockOptions { MaxDegreeOfParallelism = maxWriteCount });

        // Combine pipe
        readRoutine.LinkTo(processRoutine, options);
        processRoutine.LinkTo(writeRoutine, options);

        // Post work to pipe
        foreach (var file in files)
        {
            readRoutine.Post(file);
        }

        // Wait for completion
        readRoutine.Complete();
        await writeRoutine.Completion;
    }

    // Read file content async from full file path
    private async Task<string> ReadSourceFile(string srcFile) => await File.ReadAllTextAsync(srcFile);

    // Generate test from Generator class
    private List<TargetContainer> GenerateTests(string code)
    {
        var testGenerator = new Generator(code);
        return testGenerator.GenerateInfo();
    }

    // Create or open directory and write tests into .cs files
    private void WriteTestsToFile(string outputDirectory, List<TargetContainer> tests)
    {
        if (!Directory.Exists(outputDirectory))
        {
            Directory.CreateDirectory(outputDirectory);
        }

        foreach (var test in tests)
            File.WriteAllTextAsync(Path.Combine(outputDirectory, test.Path, ".cs"), test.Code);
    }
}
